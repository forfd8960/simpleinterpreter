// Code generated by "enumer -type=TokenType"; DO NOT EDIT.

package tokens

import (
	"fmt"
	"strings"
)

const _TokenTypeName = "ILLEGALEOFIDENTINTEGERSTRINGASSIGNPLUSMINUSBANGASTERISKSLASHLTGTEQUALNOTEQUALCOMMASEMICOLONLPRARENTRPARENTLBRACERBRACEFUNCTIONLETIFELSERETURNTRUEFALSE"

var _TokenTypeIndex = [...]uint8{0, 7, 10, 15, 22, 28, 34, 38, 43, 47, 55, 60, 62, 64, 69, 77, 82, 91, 99, 106, 112, 118, 126, 129, 131, 135, 141, 145, 150}

const _TokenTypeLowerName = "illegaleofidentintegerstringassignplusminusbangasteriskslashltgtequalnotequalcommasemicolonlprarentrparentlbracerbracefunctionletifelsereturntruefalse"

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenTypeIndex)-1) {
		return fmt.Sprintf("TokenType(%d)", i)
	}
	return _TokenTypeName[_TokenTypeIndex[i]:_TokenTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TokenTypeNoOp() {
	var x [1]struct{}
	_ = x[ILLEGAL-(0)]
	_ = x[EOF-(1)]
	_ = x[IDENT-(2)]
	_ = x[INTEGER-(3)]
	_ = x[STRING-(4)]
	_ = x[ASSIGN-(5)]
	_ = x[PLUS-(6)]
	_ = x[MINUS-(7)]
	_ = x[BANG-(8)]
	_ = x[ASTERISK-(9)]
	_ = x[SLASH-(10)]
	_ = x[LT-(11)]
	_ = x[GT-(12)]
	_ = x[EQUAL-(13)]
	_ = x[NOTEQUAL-(14)]
	_ = x[COMMA-(15)]
	_ = x[SEMICOLON-(16)]
	_ = x[LPRARENT-(17)]
	_ = x[RPARENT-(18)]
	_ = x[LBRACE-(19)]
	_ = x[RBRACE-(20)]
	_ = x[FUNCTION-(21)]
	_ = x[LET-(22)]
	_ = x[IF-(23)]
	_ = x[ELSE-(24)]
	_ = x[RETURN-(25)]
	_ = x[TRUE-(26)]
	_ = x[FALSE-(27)]
}

var _TokenTypeValues = []TokenType{ILLEGAL, EOF, IDENT, INTEGER, STRING, ASSIGN, PLUS, MINUS, BANG, ASTERISK, SLASH, LT, GT, EQUAL, NOTEQUAL, COMMA, SEMICOLON, LPRARENT, RPARENT, LBRACE, RBRACE, FUNCTION, LET, IF, ELSE, RETURN, TRUE, FALSE}

var _TokenTypeNameToValueMap = map[string]TokenType{
	_TokenTypeName[0:7]:          ILLEGAL,
	_TokenTypeLowerName[0:7]:     ILLEGAL,
	_TokenTypeName[7:10]:         EOF,
	_TokenTypeLowerName[7:10]:    EOF,
	_TokenTypeName[10:15]:        IDENT,
	_TokenTypeLowerName[10:15]:   IDENT,
	_TokenTypeName[15:22]:        INTEGER,
	_TokenTypeLowerName[15:22]:   INTEGER,
	_TokenTypeName[22:28]:        STRING,
	_TokenTypeLowerName[22:28]:   STRING,
	_TokenTypeName[28:34]:        ASSIGN,
	_TokenTypeLowerName[28:34]:   ASSIGN,
	_TokenTypeName[34:38]:        PLUS,
	_TokenTypeLowerName[34:38]:   PLUS,
	_TokenTypeName[38:43]:        MINUS,
	_TokenTypeLowerName[38:43]:   MINUS,
	_TokenTypeName[43:47]:        BANG,
	_TokenTypeLowerName[43:47]:   BANG,
	_TokenTypeName[47:55]:        ASTERISK,
	_TokenTypeLowerName[47:55]:   ASTERISK,
	_TokenTypeName[55:60]:        SLASH,
	_TokenTypeLowerName[55:60]:   SLASH,
	_TokenTypeName[60:62]:        LT,
	_TokenTypeLowerName[60:62]:   LT,
	_TokenTypeName[62:64]:        GT,
	_TokenTypeLowerName[62:64]:   GT,
	_TokenTypeName[64:69]:        EQUAL,
	_TokenTypeLowerName[64:69]:   EQUAL,
	_TokenTypeName[69:77]:        NOTEQUAL,
	_TokenTypeLowerName[69:77]:   NOTEQUAL,
	_TokenTypeName[77:82]:        COMMA,
	_TokenTypeLowerName[77:82]:   COMMA,
	_TokenTypeName[82:91]:        SEMICOLON,
	_TokenTypeLowerName[82:91]:   SEMICOLON,
	_TokenTypeName[91:99]:        LPRARENT,
	_TokenTypeLowerName[91:99]:   LPRARENT,
	_TokenTypeName[99:106]:       RPARENT,
	_TokenTypeLowerName[99:106]:  RPARENT,
	_TokenTypeName[106:112]:      LBRACE,
	_TokenTypeLowerName[106:112]: LBRACE,
	_TokenTypeName[112:118]:      RBRACE,
	_TokenTypeLowerName[112:118]: RBRACE,
	_TokenTypeName[118:126]:      FUNCTION,
	_TokenTypeLowerName[118:126]: FUNCTION,
	_TokenTypeName[126:129]:      LET,
	_TokenTypeLowerName[126:129]: LET,
	_TokenTypeName[129:131]:      IF,
	_TokenTypeLowerName[129:131]: IF,
	_TokenTypeName[131:135]:      ELSE,
	_TokenTypeLowerName[131:135]: ELSE,
	_TokenTypeName[135:141]:      RETURN,
	_TokenTypeLowerName[135:141]: RETURN,
	_TokenTypeName[141:145]:      TRUE,
	_TokenTypeLowerName[141:145]: TRUE,
	_TokenTypeName[145:150]:      FALSE,
	_TokenTypeLowerName[145:150]: FALSE,
}

var _TokenTypeNames = []string{
	_TokenTypeName[0:7],
	_TokenTypeName[7:10],
	_TokenTypeName[10:15],
	_TokenTypeName[15:22],
	_TokenTypeName[22:28],
	_TokenTypeName[28:34],
	_TokenTypeName[34:38],
	_TokenTypeName[38:43],
	_TokenTypeName[43:47],
	_TokenTypeName[47:55],
	_TokenTypeName[55:60],
	_TokenTypeName[60:62],
	_TokenTypeName[62:64],
	_TokenTypeName[64:69],
	_TokenTypeName[69:77],
	_TokenTypeName[77:82],
	_TokenTypeName[82:91],
	_TokenTypeName[91:99],
	_TokenTypeName[99:106],
	_TokenTypeName[106:112],
	_TokenTypeName[112:118],
	_TokenTypeName[118:126],
	_TokenTypeName[126:129],
	_TokenTypeName[129:131],
	_TokenTypeName[131:135],
	_TokenTypeName[135:141],
	_TokenTypeName[141:145],
	_TokenTypeName[145:150],
}

// TokenTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenTypeString(s string) (TokenType, error) {
	if val, ok := _TokenTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TokenTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TokenType values", s)
}

// TokenTypeValues returns all values of the enum
func TokenTypeValues() []TokenType {
	return _TokenTypeValues
}

// TokenTypeStrings returns a slice of all String values of the enum
func TokenTypeStrings() []string {
	strs := make([]string, len(_TokenTypeNames))
	copy(strs, _TokenTypeNames)
	return strs
}

// IsATokenType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TokenType) IsATokenType() bool {
	for _, v := range _TokenTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
